#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<Windows.h>
#include<stack>

#define WALL 1
#define ME 3
#define WAY 4
#define NO_WAY 5
#define CLEAR 2

void map_draw(int map[][15])
{
	for (int Y = 0; Y < 10; Y++)
	{
		for (int X = 0; X < 15; X++)
		{
			if (map[Y][X] == 1)
				printf("▦");
			else if (map[Y][X] == 3)
			{
				printf("◎");
			}
			else
				printf("  ");
		}
		printf("\n");
	}
}

bool move(int map[][15], int* x, int* y,
	std::stack<int>* character_X, std::stack<int>* character_Y)
{
	static int last_rocation = 0 ;
	if (last_rocation == 2)
		return true;
	if (*x >= 0 && *x < 15 && *y >= 0 && *y < 10)
	{
		//자신의 앞.양옆만을 탐색하고 지나온 자리(스텍에 저장되어있는)는 탐색하지않는다
		if (*x + 1 < 15 && (map[*y][*x + 1] == 0 || map[*y][*x + 1] == 2)
			/*&& map[*y][*x + 1] != map[character_X->top()][character_Y->top()]*/)
		{
			(*character_X).push(*x);
			(*character_Y).push(*y);
			map[*y][*x] = WAY;
			*x += 1;
			last_rocation = map[*y][*x];
		}
		else if (*y + 1 < 10 && (map[*y + 1][*x] == 0 || map[*y + 1][*x] == 2)
			/*&& map[*y + 1][*x] != map[character_X->top()][character_Y->top()]*/)
		{
			(*character_X).push(*x);
			(*character_Y).push(*y);
			map[*y][*x] = WAY;
			*y += 1;
			last_rocation = map[*y][*x];
		}
		else if (*x - 1 > 0 && (map[*y][*x - 1] == 0 || map[*y][*x - 1] == 2)
			/*&& map[*y][*x - 1] != map[character_X->top()][character_Y->top()]*/)
		{
			(*character_X).push(*x);
			(*character_Y).push(*y);
			map[*y][*x] = WAY;
			*x -= 1;
			last_rocation = map[*y][*x];
		}
		else if (*y - 1 > 0 && (map[*y - 1][*x] == 0 || map[*y - 1][*x] == 2)
			/*&& map[*y - 1][*x] != map[character_X->top()][character_Y->top()]*/)
		{
			(*character_X).push(*x);
			(*character_Y).push(*y);
			map[*y][*x] = WAY;
			*y -= 1;
			last_rocation = map[*y][*x];
		}
		else
		{
			map[*y][*x] = NO_WAY;
			*x = (*character_X).top();
			*y = (*character_Y).top();
			(*character_X).pop();
			(*character_Y).pop();
			last_rocation = map[*y][*x];
		}
		map[*y][*x] = ME;
		return false;
	}
}
void main()
{
	int map[10][15] = {
	{ 1,1,ME,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,1,0,0,0,0,1,0,1,0,0,0,0,0,1 },
	{ 1,1,1,1,1,0,1,0,0,0,1,1,1,0,1 },
	{ 1,0,1,0,0,0,0,1,0,0,0,0,1,0,1 },
	{ 1,0,0,0,1,0,0,1,0,1,0,1,1,1,1 },
	{ 1,1,1,1,1,0,0,0,0,1,0,0,1,0,1 },
	{ 1,0,0,0,1,0,0,0,1,1,1,0,0,0,1 },
	{ 1,1,1,0,0,0,1,1,1,0,0,0,1,1,1 },
	{ 1,0,0,0,1,0,0,0,1,0,1,0,0,0,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,CLEAR,1,1 }
	};
	int x = 2, y = 0;
	std::stack<int> character_X;
	std::stack<int> character_Y;
	character_X.push(x);
	character_Y.push(y);
	while (1)
	{
		Sleep(500);
		system("cls");
		map_draw(map);

		if (move(map, &x, &y, &character_X, &character_Y) == true)
		{
			printf("\n 탈출!\n");
			return;
		}
	}
}
