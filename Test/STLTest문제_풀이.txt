1.func(10, 20, 30) 세 인자를받는 연산자 오버로딩 함수로 선언하시요
	int& operlater(int a,int b,int c){ return  c };


2.다음 구문이 컴파일 될 수 있게 최소한의 String클래스를 작성하시오

#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<Windows.h>

class String
{
private:
	char m_ch[100];
public:
	String() { m_ch[100] = NULL; }
	String(char ch[100]) 
	{
		int i;
		for (i = 0; ch[i] != NULL; i++)
		{
			m_ch[i] = ch[i];
		}
		m_ch[i] = NULL;
	}
	String(const char ch[100]) 
	{ 
		int i;
		for (i = 0; ch[i] != NULL; i++)
		{
			m_ch[i] = ch[i];
		}
		m_ch[i] = NULL;
	};
	char* c_str()
	{
		return m_ch;
	}
	~String() {};
};


2-1.String s("Hello!");
const char* sz = s.c_str();


2-2.const char* sz = "Hello!";
String s("Hi~!");
s = sz;



3.다음 구문이 작동하는 함수 템플릿 Copy()를 완성하시오

Copy(int* arr1,int* arr2,int num)
	{
		for(int i=0;i<num;i++)
		{
			arr1[i] = arr2[i];
		}
	};

int main()
{
	int arr1[5] = { 10, 20, 30, 40, 50 };
	int arr2[5];

	//Copy(t, s, n) t:목적지 주소, s:소스 주소, n: 원소갯수 
	Copy(arr2, arr1, 5);

	MyType myArr1[5] = {/*구성 요소의 구성 부분*/};
	MyType myArr2[5];

	Copy(myArr2, myArr1, 5);

	return 0;
}


4.Push(), Empty(), Pop()이 동작하는 최소한의 Stack 클래스를 작성 하시오.

template<template data>
Class Stack
{
private:
	static Stack* Top;
	data m_data = NULL;
	Stack* Next = NULL;
public:
	Stack();
	void Push(data in)
	{
		Stack<data>* tmp = new Stack<data>;
		tmp.m_data=in;
		Next = Top;
		Top = tmp;
	}
	data Pop()
	{	
		if(Top == NULL)
			return;
		Stack* tmp = Top;
		data d_tmp = tmp.m_data;
		m_data = Next.m_data;
		Top = Next;
		Next = Top.Next;
		free(tmp);
		return d_tmp;
	}
	int Empty()
	{
		if(Top.m_data != NULL)
			return 1;
		else
			return 0;
	}
}

int main()
{
	Stack<int> st;

	st.Push(10);
	st.Push(20);
	st.Push(30);;

	if (!st.Empty())
		cout << st.Pop() << endl;

	if(!st.Empy())
		cout << st.Pop() << endl;

	if (!st.Empy())
		cout << st.Pop() << endl;
}

5.Push(), Empty(), Pop()이 동작하는 최소한의 Queue 클래스를 작성하시오.

template<template data>
Class Queue
{
private:
	static Queue* Front = NULL;
	data m_data = NULL;
	Queue* Rear = NULL;
public:
	Queue();
	void Push(data in)
	{
		Queue<data>* tmp = new Queue<data>;
		tmp.m_data=in;
		if(Front == NULL)
		{
			Front = tmp;
			Rear = Front;	
		}
		else
		{
			Rear.Rear=tmp;
			Rear=Rear.Rear;
		}
	}
	data Pop()
	{	
		if(Front == NULL)
			return;
		Queue* tmp = Front;
		data d_tmp = tmp.m_data;
		Front = Front.Rear;
		free(tmp);
		return d_tmp;
	}
	int Empty()
	{
		if(Front.m_data != NULL)
			return 1;
		else
			return 0;
	}
}

int main()
{
	Queue<int> q;

	q.Push(10);
	q.Push(20);
	q.Push(30);

	if (!q.Empty())
		cout << q.Pop() << endl;

	if (!q.Empty())
		cout << q.Pop() << endl;

	if (!q.Empty())
		cout << q.Pop() << endl;

	return 0;
}

6.각각의 맞는 답을 작성하시오.

	6-1.STL 구성 요소에서 객테를 저장하는 객체를( 컨테이너 )라 한다.
	6-2.컨테이너의 원소를 순회하고 참조하는 객체를( 반복자(iterator))라 한다. >container :: iterator 라고 선언. begin(),end()함수 사용.
	6-3.여러 가지 문제 해결을 위한 반복자와 동작하는 함수 템플릿을( 알고리즘(Algorithm) )라 한다.
	6-4.컨테이너 원소가 자신만의 삽입 위치를 갖는 것을( 시퀸스 ) 컨테이너라 한다. > 삽입되는 순서에 따라 원소위치가 결정
	6-5.컨테이너 원소가 특정 정렬 기준에 의해 자동 정렬된 것을( 연관) 컨테이너라 한다. > 정렬기준에 따라 원소위치가 결정

7.vector<int> v는 A, B, C, D, E라는 원소를 차례대로 가지고 있다.
반복자 iter는 C를 가리키고 있는 상황이다. 
[begin, end), [begin, iter), [iter, end)의 순차열을 각각 쓰시오. >> 순차열 : 순서대로 원소를 나열한 것.
	
	begin, iter = A B C
	iter, end = C D E
	begin, end = A B C D E


8.vector, deque, list의 특징을 기술하시오.

	vector - 배열형 컨테이너 원소의 순서로 접근이 가능하다. 원소를 추가 할 때 구조적인 변화를 거치고 첫번째 원소와 마지막 원소간의 검색속도 차이가 크지만 원소의 정보보다 원소간의 순서와 차례가 중요 할 때 보다 빠른 속도로 정보를 처리 할 수 있다. 

	list - 자기참조형 컨테이너 원소가 기차열처럼 이어져있어 특정한 데이터를 가지고있어 원소들이 각자 특징적인 정보들을 가지고 있을 때 보다 편하게 정보를 관리 할 수 있다.

	deque - Stack과 Queue의 장점을 모은 것. 선입선출과 후입선출 방식을 모두 사용 할 수 있다. 데이터를 담을 수 있는 크기가 가변적이다. 앞 뒤 모두에서 삽입삭제를 할 수 있다.다만 중간에 데이터 삽입과 삭제를 하는데는 불편하다. 구현하기 쉽지 않다.

9.vector의 []연산자와 at()의 공통점과 차이를 쓰세요

	[] 연산자와 at() 둘 다 각 원소의 순서를 입력해 접근 할 수 있게 해주지만 
	at()은 변수.at(원소 순서);라고 써야하며 []연산자는 변수[원소 순서];만 쓰면 된다.
	[]연산자는 at()을 사용한 연산자오버로딩이다.


10.vector와 deque의 가장 큰 차이점을 쓰세요

	벡터는 배열 뒤에 순차적으로 데이터를 추가하는데에 용이하지만 덱은 앞도 뒤도 데이터를 추가하는 것에 모두 용이하다.


11.vector와 list의 가장 큰 차이점을 쓰세요.

	list는 자기참조로 구성되어있고 
	vector는 배열로 구성되어있다.


12. 시퀀스 컨테이너와 연관 컨테이너의 가장 큰 차이점을 쓰세요.

	시퀸스 - 삽입되는 순서에 따라서 원소 위치가 결정된다
	연관 - 삽입되는 순서와 관련없이. 정렬기준에 따라서 원소 위치가 결정된다.


13. 연관 컨테이너의 기본 정렬 기분은 무엇인가?

	연산자 함수 객체인 less<>조건자


14.set과 map의 특징을 기술하시오.
	둘 다 노드기반 컨테이너이며 less조건자의 기준에따라 자동정렬되는 컨테이너이다. 균형이진트리(탐색이진트리)로 구현되어있다.

	map - key와  value쌍으로 저장한다. (pair객체. first는 key를 가리키며 second는 value를 가리킨다.) []연산자를 제공한다. 

	set - key하나만을 저장한다. (pair객체. first는 key를 가리키며 second는 key의 위치를 가리키는 반복자와 성공실패를 가리키는 bool자료형이다.)

	중복 key를 허용하고 싶다면 multimap,multiset을 사용해야한다.


15.set과 map의 차이점을 기술하시오.

	set은 key하나만을 저장하고,map은 key와 value 두가지를 저장한다.


16.연관 컨테이너의 찾기 관련 함수의 성능을 기술 하시오.

	빠른 원소찾기가 가능하며 검색시간은 '로그 시간'이다. 


17.vector<int> v는 10,20,30,40,50의 원소를 가지고 있다.  >>알고리즘 : 내장함수
알고리즘을 사용하여 30을 제거하는 코드를 작성하시오

	v.erase(v.begine()+2);

18.vector<int> v는 10,20,30,40,50,60,70,80,90,100의 순차열을 가지는 원소를 가지고 있다.
알고리즘을 사용하여 50,40,30,20,10,60,70,80,90,100을 만들어 주는 코드를 작성하시오.

	sort(v.begin(), v.end()-5,std::greater<int>());


19.vector<int> v는 70, 20, 30, 32, 40, 33, 60, 32, 33, 90, 50의 순차열을 가지는 원소를 
가지고 있다. 정렬과 함께 모든 원소가 유일하게 하는 코드를 작성하시오.

	sort(v.begin(), v.end());
	v.erase(unique(v.begin(), v.end()), v.end());	//unique(v.begin(), v.end()); //중복되는 값의 시작원소를 반환

20.vector<int>v1은 10,20,30,40,50,60,70,80,90,100의 순차열을 가지는 원소를 가지고 있다. 
v1을 v2에 복사를 한 뒤 v1과 v2의 합을 v3로 출력하는 코드를 작성하시오.

	vector<int>v2 = v1;
	vector<int>v3 = v1+v2;

21.vector<int> v1은 50,10,30,80,60의 순차열을 가지는 원소를 가지고 있고 size는 5이다.
vector<int> v2는 20,70,40의 순차열을 가지는 원소를 가지고 있고 size는 3이다.
v1과 v2를 v3으로 합병하는 코드를 작성하시오.
	
	vector<int> v3(v1.size()+v2.size()); //크기 지정해줘야함
	sort(v1.begin(), v1.end());
	sort(v2.begin(), v2.end());
	merge(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin());


22.vector<int> v1은 10,20,30,40,50,60,70,80,90,100의 순차열을 가지는 원소를 가지고 있다.
v1을 다음과 같은 순차열을 가지게 만드는 코드를 작성하시오 ==> 70,80,90,100,10,20,30,40,50,60

	sort(v1.begin(), v1.end(), greater<int>());
	sort(v1.begin(), v1.begin()+4);
	sort(v1.begin()+4, v1.end());


23.vector<int> v1은 50,10,30,80,60의 순차열을 가지는 원소를 v2는 20,70,40의 순차열을
 가지는 원소를 가지고 있다.
v1 + v2의 합집합을 v3에 출력하는 코드를 작성하시오.

	vector<int> v3(v1.size() + v2.size()); //크기 지정해줘야함
	sort(v1.begin(), v1.end());
	sort(v2.begin(), v2.end()); //하기전에 오름차순 정렬. 

	auto iter = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin());
	v3.erase(iter, v3.end());	//v3.resize(iter- v3.begin()); 이렇게 쓸 수도 있다.
				ㄴ>erase(지울 범위,지울 대상); (지울 대상만 적어도 됨) / 크기를 재정의 할 대상.resize(크기);


24.양방향 반복자와 임의 접근 반복자의 차이점을 설명하시오.
	
	양방향 - list, set,map 읽기/쓰기 모두 가능. 순/역방향이동 ++ --가 가능.
	임의 접근 - 일반 포인터,vector deque 임의 접근. 양방향 반복자 기능에 + 1 += -= [] 연산이 가능.


25.X::iterator와 X::const_iterator의 차이점을 설명하시오.

	X::const_iterator는  const 값을 가리키는 반복자라서 참조된 값의 수정을 방지한다. 맴버를 읽기만 할 때에 용이하다. 수정하면 안될 때.


26.vector<int> v1은 10,20,30,40,50을 순차열로 가지는 원소를 가지고 있다.
정방향 반복자 iter는 40을 가리키고있고 역방향 반복자 riter는 40을 가리키고있다.
다음 질문에 알맞는 답을 하시오.

	26-1.*iter와 *riter의 값을 쓰시오. 		40
	26-2.*++iter와 *++riter의 값을 각각 쓰시오. 	50 , 30	
	26-3.X::iterator iter2 = riter가 가능한가?		 불가능.
	26-4.X::reverse_iterator riter2 = iter가 가능한가? 	불가능.

27 다음 구문에서 오류를 찾아서 수정해보자.

int main()
{
	vector<int> v1;
	v1.push_back(10);
	v1.push_back(40);
	v1.push_back(50);

	vector<int> v2;
	v2.push_back(20);
	v2.push_back(30);
	v2.push_back(60);

	vector<int> v3(6);

	merge(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin());

	for (vector<int>::size_type i = 0; i < v3.size(); ++i)
	{
		/*count << v3[i] << endl;*/ 		수정 >> count(v3.begin(), v3.end(), v3[i])
	}

	return 0;
}


28. v컨테이너의 원소를 copy()알고리즘을 사용해서 완성해보자.

int main()
{
	vector<int> v;
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	
	//copy() 알고리즘

		vector<int> v2;	
		copy(v.begin(), v.end(), v2);

	return 0;
}